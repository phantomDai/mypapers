AORB_1:43:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):actualmonthlymileage - allowableMileage => actualmonthlymileage * allowableMileage
AORB_2:43:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):actualmonthlymileage - allowableMileage => actualmonthlymileage / allowableMileage
AORB_3:43:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):actualmonthlymileage - allowableMileage => actualmonthlymileage % allowableMileage
AORB_4:43:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):actualmonthlymileage - allowableMileage => actualmonthlymileage + allowableMileage
AORB_5:43:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):costPerKilometer * (actualmonthlymileage - allowableMileage) => costPerKilometer / (actualmonthlymileage - allowableMileage)
AORB_6:43:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):costPerKilometer * (actualmonthlymileage - allowableMileage) => costPerKilometer % (actualmonthlymileage - allowableMileage)
AORB_7:43:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):costPerKilometer * (actualmonthlymileage - allowableMileage) => costPerKilometer + (actualmonthlymileage - allowableMileage)
AORB_8:43:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):costPerKilometer * (actualmonthlymileage - allowableMileage) => costPerKilometer - (actualmonthlymileage - allowableMileage)
AORB_9:71:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):-feeForOverUseOfCar + airfareReimbursement => -feeForOverUseOfCar * airfareReimbursement
AORB_10:71:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):-feeForOverUseOfCar + airfareReimbursement => -feeForOverUseOfCar / airfareReimbursement
AORB_11:71:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):-feeForOverUseOfCar + airfareReimbursement => -feeForOverUseOfCar % airfareReimbursement
AORB_12:71:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):-feeForOverUseOfCar + airfareReimbursement => -feeForOverUseOfCar - airfareReimbursement
AORB_13:71:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):-feeForOverUseOfCar + airfareReimbursement + reimbursementsOtherThanAirfare => (-feeForOverUseOfCar + airfareReimbursement) * reimbursementsOtherThanAirfare
AORB_14:71:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):-feeForOverUseOfCar + airfareReimbursement + reimbursementsOtherThanAirfare => (-feeForOverUseOfCar + airfareReimbursement) / reimbursementsOtherThanAirfare
AORB_15:71:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):-feeForOverUseOfCar + airfareReimbursement + reimbursementsOtherThanAirfare => (-feeForOverUseOfCar + airfareReimbursement) % reimbursementsOtherThanAirfare
AORB_16:71:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):-feeForOverUseOfCar + airfareReimbursement + reimbursementsOtherThanAirfare => -feeForOverUseOfCar + airfareReimbursement - reimbursementsOtherThanAirfare
AODU_1:71:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):-feeForOverUseOfCar => feeForOverUseOfCar
AOIU_1:25:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):allowableMileage => -allowableMileage
AOIU_2:32:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):allowableMileage => -allowableMileage
AOIU_3:43:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):costPerKilometer => -costPerKilometer
AOIU_4:43:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):actualmonthlymileage => -actualmonthlymileage
AOIU_5:45:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):airfareamount => -airfareamount
AOIU_6:49:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):airfareamount => -airfareamount
AOIU_7:56:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):airfareamount => -airfareamount
AOIU_8:67:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):otherexpensesamount => -otherexpensesamount
AOIU_9:72:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):totalReimbursementAmount => -totalReimbursementAmount
AOIS_1:24:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):actualmonthlymileage => ++actualmonthlymileage
AOIS_2:24:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):actualmonthlymileage => --actualmonthlymileage
AOIS_3:24:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):actualmonthlymileage => actualmonthlymileage++
AOIS_4:24:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):actualmonthlymileage => actualmonthlymileage--
AOIS_5:24:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):allowableMileage => ++allowableMileage
AOIS_6:24:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):allowableMileage => --allowableMileage
AOIS_7:24:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):allowableMileage => allowableMileage++
AOIS_8:24:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):allowableMileage => allowableMileage--
AOIS_9:25:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):allowableMileage => ++allowableMileage
AOIS_10:25:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):allowableMileage => --allowableMileage
AOIS_11:25:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):allowableMileage => allowableMileage++
AOIS_12:25:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):allowableMileage => allowableMileage--
AOIS_13:31:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):actualmonthlymileage => ++actualmonthlymileage
AOIS_14:31:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):actualmonthlymileage => --actualmonthlymileage
AOIS_15:31:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):actualmonthlymileage => actualmonthlymileage++
AOIS_16:31:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):actualmonthlymileage => actualmonthlymileage--
AOIS_17:31:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):allowableMileage => ++allowableMileage
AOIS_18:31:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):allowableMileage => --allowableMileage
AOIS_19:31:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):allowableMileage => allowableMileage++
AOIS_20:31:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):allowableMileage => allowableMileage--
AOIS_21:32:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):allowableMileage => ++allowableMileage
AOIS_22:32:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):allowableMileage => --allowableMileage
AOIS_23:32:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):allowableMileage => allowableMileage++
AOIS_24:32:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):allowableMileage => allowableMileage--
AOIS_25:43:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):costPerKilometer => ++costPerKilometer
AOIS_26:43:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):costPerKilometer => --costPerKilometer
AOIS_27:43:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):costPerKilometer => costPerKilometer++
AOIS_28:43:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):costPerKilometer => costPerKilometer--
AOIS_29:43:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):actualmonthlymileage => ++actualmonthlymileage
AOIS_30:43:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):actualmonthlymileage => --actualmonthlymileage
AOIS_31:43:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):actualmonthlymileage => actualmonthlymileage++
AOIS_32:43:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):actualmonthlymileage => actualmonthlymileage--
AOIS_33:43:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):allowableMileage => ++allowableMileage
AOIS_34:43:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):allowableMileage => --allowableMileage
AOIS_35:43:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):allowableMileage => allowableMileage++
AOIS_36:43:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):allowableMileage => allowableMileage--
AOIS_37:45:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):airfareamount => ++airfareamount
AOIS_38:45:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):airfareamount => --airfareamount
AOIS_39:45:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):airfareamount => airfareamount++
AOIS_40:45:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):airfareamount => airfareamount--
AOIS_41:48:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):monthlysalesamount => ++monthlysalesamount
AOIS_42:48:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):monthlysalesamount => --monthlysalesamount
AOIS_43:48:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):monthlysalesamount => monthlysalesamount++
AOIS_44:48:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):monthlysalesamount => monthlysalesamount--
AOIS_45:49:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):airfareamount => ++airfareamount
AOIS_46:49:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):airfareamount => --airfareamount
AOIS_47:49:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):airfareamount => airfareamount++
AOIS_48:49:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):airfareamount => airfareamount--
AOIS_49:55:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):monthlysalesamount => ++monthlysalesamount
AOIS_50:55:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):monthlysalesamount => --monthlysalesamount
AOIS_51:55:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):monthlysalesamount => monthlysalesamount++
AOIS_52:55:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):monthlysalesamount => monthlysalesamount--
AOIS_53:56:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):airfareamount => ++airfareamount
AOIS_54:56:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):airfareamount => --airfareamount
AOIS_55:56:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):airfareamount => airfareamount++
AOIS_56:56:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):airfareamount => airfareamount--
AOIS_57:66:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):monthlysalesamount => ++monthlysalesamount
AOIS_58:66:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):monthlysalesamount => --monthlysalesamount
AOIS_59:66:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):monthlysalesamount => monthlysalesamount++
AOIS_60:66:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):monthlysalesamount => monthlysalesamount--
AOIS_61:67:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):otherexpensesamount => ++otherexpensesamount
AOIS_62:67:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):otherexpensesamount => --otherexpensesamount
AOIS_63:67:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):otherexpensesamount => otherexpensesamount++
AOIS_64:67:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):otherexpensesamount => otherexpensesamount--
AOIS_65:71:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):airfareReimbursement => ++airfareReimbursement
AOIS_66:71:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):airfareReimbursement => --airfareReimbursement
AOIS_67:71:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):airfareReimbursement => airfareReimbursement++
AOIS_68:71:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):airfareReimbursement => airfareReimbursement--
AOIS_69:71:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):reimbursementsOtherThanAirfare => reimbursementsOtherThanAirfare++
AOIS_70:71:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):reimbursementsOtherThanAirfare => reimbursementsOtherThanAirfare--
AOIS_71:72:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):totalReimbursementAmount => totalReimbursementAmount++
AOIS_72:72:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):totalReimbursementAmount => totalReimbursementAmount--
ROR_1:24:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): actualmonthlymileage < allowableMileage  =>   actualmonthlymileage > allowableMileage
ROR_2:24:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): actualmonthlymileage < allowableMileage  =>   actualmonthlymileage >= allowableMileage
ROR_3:24:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): actualmonthlymileage < allowableMileage  =>   actualmonthlymileage <= allowableMileage
ROR_4:24:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): actualmonthlymileage < allowableMileage  =>   actualmonthlymileage == allowableMileage
ROR_5:24:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): actualmonthlymileage < allowableMileage  =>   actualmonthlymileage != allowableMileage
ROR_6:24:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): actualmonthlymileage < allowableMileage  =>   true
ROR_7:24:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): actualmonthlymileage < allowableMileage  =>   false
ROR_8:31:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): actualmonthlymileage < allowableMileage  =>   actualmonthlymileage > allowableMileage
ROR_9:31:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): actualmonthlymileage < allowableMileage  =>   actualmonthlymileage >= allowableMileage
ROR_10:31:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): actualmonthlymileage < allowableMileage  =>   actualmonthlymileage <= allowableMileage
ROR_11:31:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): actualmonthlymileage < allowableMileage  =>   actualmonthlymileage == allowableMileage
ROR_12:31:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): actualmonthlymileage < allowableMileage  =>   actualmonthlymileage != allowableMileage
ROR_13:31:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): actualmonthlymileage < allowableMileage  =>   true
ROR_14:31:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): actualmonthlymileage < allowableMileage  =>   false
ROR_15:48:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): monthlysalesamount >= 50000  =>   monthlysalesamount > 50000
ROR_16:48:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): monthlysalesamount >= 50000  =>   monthlysalesamount < 50000
ROR_17:48:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): monthlysalesamount >= 50000  =>   monthlysalesamount <= 50000
ROR_18:48:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): monthlysalesamount >= 50000  =>   monthlysalesamount == 50000
ROR_19:48:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): monthlysalesamount >= 50000  =>   monthlysalesamount != 50000
ROR_20:48:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): monthlysalesamount >= 50000  =>   true
ROR_21:48:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): monthlysalesamount >= 50000  =>   false
ROR_22:55:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): monthlysalesamount >= 80000  =>   monthlysalesamount > 80000
ROR_23:55:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): monthlysalesamount >= 80000  =>   monthlysalesamount < 80000
ROR_24:55:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): monthlysalesamount >= 80000  =>   monthlysalesamount <= 80000
ROR_25:55:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): monthlysalesamount >= 80000  =>   monthlysalesamount == 80000
ROR_26:55:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): monthlysalesamount >= 80000  =>   monthlysalesamount != 80000
ROR_27:55:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): monthlysalesamount >= 80000  =>   true
ROR_28:55:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): monthlysalesamount >= 80000  =>   false
ROR_29:66:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): monthlysalesamount >= 100000  =>   monthlysalesamount > 100000
ROR_30:66:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): monthlysalesamount >= 100000  =>   monthlysalesamount < 100000
ROR_31:66:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): monthlysalesamount >= 100000  =>   monthlysalesamount <= 100000
ROR_32:66:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): monthlysalesamount >= 100000  =>   monthlysalesamount == 100000
ROR_33:66:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): monthlysalesamount >= 100000  =>   monthlysalesamount != 100000
ROR_34:66:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): monthlysalesamount >= 100000  =>   true
ROR_35:66:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): monthlysalesamount >= 100000  =>   false
COI_1:24:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): actualmonthlymileage < allowableMileage  =>  !(actualmonthlymileage < allowableMileage)
COI_2:31:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): actualmonthlymileage < allowableMileage  =>  !(actualmonthlymileage < allowableMileage)
COI_3:48:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): monthlysalesamount >= 50000  =>  !(monthlysalesamount >= 50000)
COI_4:55:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): monthlysalesamount >= 80000  =>  !(monthlysalesamount >= 80000)
COI_5:66:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): monthlysalesamount >= 100000  =>  !(monthlysalesamount >= 100000)
LOI_1:24:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):actualmonthlymileage => ~actualmonthlymileage
LOI_2:24:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):allowableMileage => ~allowableMileage
LOI_3:25:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):allowableMileage => ~allowableMileage
LOI_4:31:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):actualmonthlymileage => ~actualmonthlymileage
LOI_5:31:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):allowableMileage => ~allowableMileage
LOI_6:32:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):allowableMileage => ~allowableMileage
LOI_7:43:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):costPerKilometer => ~costPerKilometer
LOI_8:43:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):actualmonthlymileage => ~actualmonthlymileage
LOI_9:43:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):allowableMileage => ~allowableMileage
LOI_10:45:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):airfareamount => ~airfareamount
LOI_11:48:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):monthlysalesamount => ~monthlysalesamount
LOI_12:49:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):airfareamount => ~airfareamount
LOI_13:55:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):monthlysalesamount => ~monthlysalesamount
LOI_14:56:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):airfareamount => ~airfareamount
LOI_15:66:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):monthlysalesamount => ~monthlysalesamount
LOI_16:67:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):otherexpensesamount => ~otherexpensesamount
LOI_17:71:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):feeForOverUseOfCar => ~feeForOverUseOfCar
LOI_18:71:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):airfareReimbursement => ~airfareReimbursement
LOI_19:71:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):reimbursementsOtherThanAirfare => ~reimbursementsOtherThanAirfare
LOI_20:72:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):totalReimbursementAmount => ~totalReimbursementAmount
SDL_1:51:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): double feeForOverUseOfCar; double airfareReimbursement; double reimbursementsOtherThanAirfare; if (stafflevel.equals( \"seniormanager\" )) {     allowableMileage = 4000;     costPerKilometer = 5;     if (actualmonthlymileage < allowableMileage) {         actualmonthlymileage = allowableMileage;     } } else {     if (stafflevel.equals( \"manager\" )) {         allowableMileage = 3000;         costPerKilometer = 8;         if (actualmonthlymileage < allowableMileage) {             actualmonthlymileage = allowableMileage;         }     } else {         if (stafflevel.equals( \"supervisor\" )) {             allowableMileage = 0;             costPerKilometer = 0;         } else {             new java.io.IOException( \"Invalid stafflevel\" );         }     } } feeForOverUseOfCar = costPerKilometer * (actualmonthlymileage - allowableMileage); if (stafflevel.equals( \"seniormanager\" )) {     airfareReimbursement = airfareamount; } else {     if (stafflevel.equals( \"manager\" )) {         if (monthlysalesamount >= 50000) {             airfareReimbursement = airfareamount;         } else {             airfareReimbursement = 0;         }     } else {         if (stafflevel.equals( \"supervisor\" )) {             if (monthlysalesamount >= 80000) {                 airfareReimbursement = airfareamount;             } else {                 airfareReimbursement = 0;             }         } else {             new java.io.IOException( \"Invalid stafflevel\" );             airfareReimbursement = 0;         }     } } if (monthlysalesamount >= 100000) {     reimbursementsOtherThanAirfare = otherexpensesamount; } else {     reimbursementsOtherThanAirfare = 0; } double totalReimbursementAmount = -feeForOverUseOfCar + airfareReimbursement + reimbursementsOtherThanAirfare; return totalReimbursementAmount;  =>   double feeForOverUseOfCar; double airfareReimbursement; double reimbursementsOtherThanAirfare; feeForOverUseOfCar = costPerKilometer * (actualmonthlymileage - allowableMileage); if (stafflevel.equals( \"seniormanager\" )) {     airfareReimbursement = airfareamount; } else {     if (stafflevel.equals( \"manager\" )) {         if (monthlysalesamount >= 50000) {             airfareReimbursement = airfareamount;         } else {             airfareReimbursement = 0;         }     } else {         if (stafflevel.equals( \"supervisor\" )) {             if (monthlysalesamount >= 80000) {                 airfareReimbursement = airfareamount;             } else {                 airfareReimbursement = 0;             }         } else {             new java.io.IOException( \"Invalid stafflevel\" );             airfareReimbursement = 0;         }     } } if (monthlysalesamount >= 100000) {     reimbursementsOtherThanAirfare = otherexpensesamount; } else {     reimbursementsOtherThanAirfare = 0; } double totalReimbursementAmount = -feeForOverUseOfCar + airfareReimbursement + reimbursementsOtherThanAirfare; return totalReimbursementAmount;
SDL_2:72:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): double feeForOverUseOfCar; double airfareReimbursement; double reimbursementsOtherThanAirfare; if (stafflevel.equals( \"seniormanager\" )) {     allowableMileage = 4000;     costPerKilometer = 5;     if (actualmonthlymileage < allowableMileage) {         actualmonthlymileage = allowableMileage;     } } else {     if (stafflevel.equals( \"manager\" )) {         allowableMileage = 3000;         costPerKilometer = 8;         if (actualmonthlymileage < allowableMileage) {             actualmonthlymileage = allowableMileage;         }     } else {         if (stafflevel.equals( \"supervisor\" )) {             allowableMileage = 0;             costPerKilometer = 0;         } else {             new java.io.IOException( \"Invalid stafflevel\" );         }     } } feeForOverUseOfCar = costPerKilometer * (actualmonthlymileage - allowableMileage); if (stafflevel.equals( \"seniormanager\" )) {     airfareReimbursement = airfareamount; } else {     if (stafflevel.equals( \"manager\" )) {         if (monthlysalesamount >= 50000) {             airfareReimbursement = airfareamount;         } else {             airfareReimbursement = 0;         }     } else {         if (stafflevel.equals( \"supervisor\" )) {             if (monthlysalesamount >= 80000) {                 airfareReimbursement = airfareamount;             } else {                 airfareReimbursement = 0;             }         } else {             new java.io.IOException( \"Invalid stafflevel\" );             airfareReimbursement = 0;         }     } } if (monthlysalesamount >= 100000) {     reimbursementsOtherThanAirfare = otherexpensesamount; } else {     reimbursementsOtherThanAirfare = 0; } double totalReimbursementAmount = -feeForOverUseOfCar + airfareReimbursement + reimbursementsOtherThanAirfare; return totalReimbursementAmount;  =>   double feeForOverUseOfCar; double airfareReimbursement; double reimbursementsOtherThanAirfare; if (stafflevel.equals( \"seniormanager\" )) {     allowableMileage = 4000;     costPerKilometer = 5;     if (actualmonthlymileage < allowableMileage) {         actualmonthlymileage = allowableMileage;     } } else {     if (stafflevel.equals( \"manager\" )) {         allowableMileage = 3000;         costPerKilometer = 8;         if (actualmonthlymileage < allowableMileage) {             actualmonthlymileage = allowableMileage;         }     } else {         if (stafflevel.equals( \"supervisor\" )) {             allowableMileage = 0;             costPerKilometer = 0;         } else {             new java.io.IOException( \"Invalid stafflevel\" );         }     } } if (stafflevel.equals( \"seniormanager\" )) {     airfareReimbursement = airfareamount; } else {     if (stafflevel.equals( \"manager\" )) {         if (monthlysalesamount >= 50000) {             airfareReimbursement = airfareamount;         } else {             airfareReimbursement = 0;         }     } else {         if (stafflevel.equals( \"supervisor\" )) {             if (monthlysalesamount >= 80000) {                 airfareReimbursement = airfareamount;             } else {                 airfareReimbursement = 0;             }         } else {             new java.io.IOException( \"Invalid stafflevel\" );             airfareReimbursement = 0;         }     } } if (monthlysalesamount >= 100000) {     reimbursementsOtherThanAirfare = otherexpensesamount; } else {     reimbursementsOtherThanAirfare = 0; } double totalReimbursementAmount = -feeForOverUseOfCar + airfareReimbursement + reimbursementsOtherThanAirfare; return totalReimbursementAmount;
SDL_3:51:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): double feeForOverUseOfCar; double airfareReimbursement; double reimbursementsOtherThanAirfare; if (stafflevel.equals( \"seniormanager\" )) {     allowableMileage = 4000;     costPerKilometer = 5;     if (actualmonthlymileage < allowableMileage) {         actualmonthlymileage = allowableMileage;     } } else {     if (stafflevel.equals( \"manager\" )) {         allowableMileage = 3000;         costPerKilometer = 8;         if (actualmonthlymileage < allowableMileage) {             actualmonthlymileage = allowableMileage;         }     } else {         if (stafflevel.equals( \"supervisor\" )) {             allowableMileage = 0;             costPerKilometer = 0;         } else {             new java.io.IOException( \"Invalid stafflevel\" );         }     } } feeForOverUseOfCar = costPerKilometer * (actualmonthlymileage - allowableMileage); if (stafflevel.equals( \"seniormanager\" )) {     airfareReimbursement = airfareamount; } else {     if (stafflevel.equals( \"manager\" )) {         if (monthlysalesamount >= 50000) {             airfareReimbursement = airfareamount;         } else {             airfareReimbursement = 0;         }     } else {         if (stafflevel.equals( \"supervisor\" )) {             if (monthlysalesamount >= 80000) {                 airfareReimbursement = airfareamount;             } else {                 airfareReimbursement = 0;             }         } else {             new java.io.IOException( \"Invalid stafflevel\" );             airfareReimbursement = 0;         }     } } if (monthlysalesamount >= 100000) {     reimbursementsOtherThanAirfare = otherexpensesamount; } else {     reimbursementsOtherThanAirfare = 0; } double totalReimbursementAmount = -feeForOverUseOfCar + airfareReimbursement + reimbursementsOtherThanAirfare; return totalReimbursementAmount;  =>   double feeForOverUseOfCar; double airfareReimbursement; double reimbursementsOtherThanAirfare; if (stafflevel.equals( \"seniormanager\" )) {     allowableMileage = 4000;     costPerKilometer = 5;     if (actualmonthlymileage < allowableMileage) {         actualmonthlymileage = allowableMileage;     } } else {     if (stafflevel.equals( \"manager\" )) {         allowableMileage = 3000;         costPerKilometer = 8;         if (actualmonthlymileage < allowableMileage) {             actualmonthlymileage = allowableMileage;         }     } else {         if (stafflevel.equals( \"supervisor\" )) {             allowableMileage = 0;             costPerKilometer = 0;         } else {             new java.io.IOException( \"Invalid stafflevel\" );         }     } } feeForOverUseOfCar = costPerKilometer * (actualmonthlymileage - allowableMileage); if (monthlysalesamount >= 100000) {     reimbursementsOtherThanAirfare = otherexpensesamount; } else {     reimbursementsOtherThanAirfare = 0; } double totalReimbursementAmount = -feeForOverUseOfCar + airfareReimbursement + reimbursementsOtherThanAirfare; return totalReimbursementAmount;
SDL_4:68:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): double feeForOverUseOfCar; double airfareReimbursement; double reimbursementsOtherThanAirfare; if (stafflevel.equals( \"seniormanager\" )) {     allowableMileage = 4000;     costPerKilometer = 5;     if (actualmonthlymileage < allowableMileage) {         actualmonthlymileage = allowableMileage;     } } else {     if (stafflevel.equals( \"manager\" )) {         allowableMileage = 3000;         costPerKilometer = 8;         if (actualmonthlymileage < allowableMileage) {             actualmonthlymileage = allowableMileage;         }     } else {         if (stafflevel.equals( \"supervisor\" )) {             allowableMileage = 0;             costPerKilometer = 0;         } else {             new java.io.IOException( \"Invalid stafflevel\" );         }     } } feeForOverUseOfCar = costPerKilometer * (actualmonthlymileage - allowableMileage); if (stafflevel.equals( \"seniormanager\" )) {     airfareReimbursement = airfareamount; } else {     if (stafflevel.equals( \"manager\" )) {         if (monthlysalesamount >= 50000) {             airfareReimbursement = airfareamount;         } else {             airfareReimbursement = 0;         }     } else {         if (stafflevel.equals( \"supervisor\" )) {             if (monthlysalesamount >= 80000) {                 airfareReimbursement = airfareamount;             } else {                 airfareReimbursement = 0;             }         } else {             new java.io.IOException( \"Invalid stafflevel\" );             airfareReimbursement = 0;         }     } } if (monthlysalesamount >= 100000) {     reimbursementsOtherThanAirfare = otherexpensesamount; } else {     reimbursementsOtherThanAirfare = 0; } double totalReimbursementAmount = -feeForOverUseOfCar + airfareReimbursement + reimbursementsOtherThanAirfare; return totalReimbursementAmount;  =>   double feeForOverUseOfCar; double airfareReimbursement; double reimbursementsOtherThanAirfare; if (stafflevel.equals( \"seniormanager\" )) {     allowableMileage = 4000;     costPerKilometer = 5;     if (actualmonthlymileage < allowableMileage) {         actualmonthlymileage = allowableMileage;     } } else {     if (stafflevel.equals( \"manager\" )) {         allowableMileage = 3000;         costPerKilometer = 8;         if (actualmonthlymileage < allowableMileage) {             actualmonthlymileage = allowableMileage;         }     } else {         if (stafflevel.equals( \"supervisor\" )) {             allowableMileage = 0;             costPerKilometer = 0;         } else {             new java.io.IOException( \"Invalid stafflevel\" );         }     } } feeForOverUseOfCar = costPerKilometer * (actualmonthlymileage - allowableMileage); if (stafflevel.equals( \"seniormanager\" )) {     airfareReimbursement = airfareamount; } else {     if (stafflevel.equals( \"manager\" )) {         if (monthlysalesamount >= 50000) {             airfareReimbursement = airfareamount;         } else {             airfareReimbursement = 0;         }     } else {         if (stafflevel.equals( \"supervisor\" )) {             if (monthlysalesamount >= 80000) {                 airfareReimbursement = airfareamount;             } else {                 airfareReimbursement = 0;             }         } else {             new java.io.IOException( \"Invalid stafflevel\" );             airfareReimbursement = 0;         }     } } double totalReimbursementAmount = -feeForOverUseOfCar + airfareReimbursement + reimbursementsOtherThanAirfare; return totalReimbursementAmount;
SDL_5:26:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): allowableMileage = 4000; costPerKilometer = 5; if (actualmonthlymileage < allowableMileage) {     actualmonthlymileage = allowableMileage; }  =>   costPerKilometer = 5; if (actualmonthlymileage < allowableMileage) {     actualmonthlymileage = allowableMileage; }
SDL_6:26:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): allowableMileage = 4000; costPerKilometer = 5; if (actualmonthlymileage < allowableMileage) {     actualmonthlymileage = allowableMileage; }  =>   allowableMileage = 4000; if (actualmonthlymileage < allowableMileage) {     actualmonthlymileage = allowableMileage; }
SDL_7:24:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): allowableMileage = 4000; costPerKilometer = 5; if (actualmonthlymileage < allowableMileage) {     actualmonthlymileage = allowableMileage; }  =>   allowableMileage = 4000; costPerKilometer = 5;
SDL_8:43:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): if (stafflevel.equals( \"seniormanager\" )) {     allowableMileage = 4000;     costPerKilometer = 5;     if (actualmonthlymileage < allowableMileage) {         actualmonthlymileage = allowableMileage;     } } else {     if (stafflevel.equals( \"manager\" )) {         allowableMileage = 3000;         costPerKilometer = 8;         if (actualmonthlymileage < allowableMileage) {             actualmonthlymileage = allowableMileage;         }     } else {         if (stafflevel.equals( \"supervisor\" )) {             allowableMileage = 0;             costPerKilometer = 0;         } else {             new java.io.IOException( \"Invalid stafflevel\" );         }     } }  =>   if (true) {     allowableMileage = 4000;     costPerKilometer = 5;     if (actualmonthlymileage < allowableMileage) {         actualmonthlymileage = allowableMileage;     } } else {     if (stafflevel.equals( \"manager\" )) {         allowableMileage = 3000;         costPerKilometer = 8;         if (actualmonthlymileage < allowableMileage) {             actualmonthlymileage = allowableMileage;         }     } else {         if (stafflevel.equals( \"supervisor\" )) {             allowableMileage = 0;             costPerKilometer = 0;         } else {             new java.io.IOException( \"Invalid stafflevel\" );         }     } }
SDL_9:28:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): if (stafflevel.equals( \"manager\" )) {     allowableMileage = 3000;     costPerKilometer = 8;     if (actualmonthlymileage < allowableMileage) {         actualmonthlymileage = allowableMileage;     } } else {     if (stafflevel.equals( \"supervisor\" )) {         allowableMileage = 0;         costPerKilometer = 0;     } else {         new java.io.IOException( \"Invalid stafflevel\" );     } }  =>  
SDL_10:25:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): actualmonthlymileage = allowableMileage;  =>  
SDL_11:27:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): if (actualmonthlymileage < allowableMileage) {     actualmonthlymileage = allowableMileage; }  =>   if (true) {     actualmonthlymileage = allowableMileage; }
SDL_12:33:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): allowableMileage = 3000; costPerKilometer = 8; if (actualmonthlymileage < allowableMileage) {     actualmonthlymileage = allowableMileage; }  =>   costPerKilometer = 8; if (actualmonthlymileage < allowableMileage) {     actualmonthlymileage = allowableMileage; }
SDL_13:33:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): allowableMileage = 3000; costPerKilometer = 8; if (actualmonthlymileage < allowableMileage) {     actualmonthlymileage = allowableMileage; }  =>   allowableMileage = 3000; if (actualmonthlymileage < allowableMileage) {     actualmonthlymileage = allowableMileage; }
SDL_14:31:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): allowableMileage = 3000; costPerKilometer = 8; if (actualmonthlymileage < allowableMileage) {     actualmonthlymileage = allowableMileage; }  =>   allowableMileage = 3000; costPerKilometer = 8;
SDL_15:42:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): if (stafflevel.equals( \"manager\" )) {     allowableMileage = 3000;     costPerKilometer = 8;     if (actualmonthlymileage < allowableMileage) {         actualmonthlymileage = allowableMileage;     } } else {     if (stafflevel.equals( \"supervisor\" )) {         allowableMileage = 0;         costPerKilometer = 0;     } else {         new java.io.IOException( \"Invalid stafflevel\" );     } }  =>   if (true) {     allowableMileage = 3000;     costPerKilometer = 8;     if (actualmonthlymileage < allowableMileage) {         actualmonthlymileage = allowableMileage;     } } else {     if (stafflevel.equals( \"supervisor\" )) {         allowableMileage = 0;         costPerKilometer = 0;     } else {         new java.io.IOException( \"Invalid stafflevel\" );     } }
SDL_16:35:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): if (stafflevel.equals( \"supervisor\" )) {     allowableMileage = 0;     costPerKilometer = 0; } else {     new java.io.IOException( \"Invalid stafflevel\" ); }  =>  
SDL_17:32:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): actualmonthlymileage = allowableMileage;  =>  
SDL_18:34:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): if (actualmonthlymileage < allowableMileage) {     actualmonthlymileage = allowableMileage; }  =>   if (true) {     actualmonthlymileage = allowableMileage; }
SDL_19:37:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): allowableMileage = 0; costPerKilometer = 0;  =>   costPerKilometer = 0;
SDL_20:37:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): allowableMileage = 0; costPerKilometer = 0;  =>   allowableMileage = 0;
SDL_21:41:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): if (stafflevel.equals( \"supervisor\" )) {     allowableMileage = 0;     costPerKilometer = 0; } else {     new java.io.IOException( \"Invalid stafflevel\" ); }  =>   if (true) {     allowableMileage = 0;     costPerKilometer = 0; } else {     new java.io.IOException( \"Invalid stafflevel\" ); }
SDL_22:39:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): new java.io.IOException( \"Invalid stafflevel\" );  =>  
SDL_23:45:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): airfareReimbursement = airfareamount;  =>  
SDL_24:66:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): if (stafflevel.equals( \"seniormanager\" )) {     airfareReimbursement = airfareamount; } else {     if (stafflevel.equals( \"manager\" )) {         if (monthlysalesamount >= 50000) {             airfareReimbursement = airfareamount;         } else {             airfareReimbursement = 0;         }     } else {         if (stafflevel.equals( \"supervisor\" )) {             if (monthlysalesamount >= 80000) {                 airfareReimbursement = airfareamount;             } else {                 airfareReimbursement = 0;             }         } else {             new java.io.IOException( \"Invalid stafflevel\" );             airfareReimbursement = 0;         }     } }  =>   if (true) {     airfareReimbursement = airfareamount; } else {     if (stafflevel.equals( \"manager\" )) {         if (monthlysalesamount >= 50000) {             airfareReimbursement = airfareamount;         } else {             airfareReimbursement = 0;         }     } else {         if (stafflevel.equals( \"supervisor\" )) {             if (monthlysalesamount >= 80000) {                 airfareReimbursement = airfareamount;             } else {                 airfareReimbursement = 0;             }         } else {             new java.io.IOException( \"Invalid stafflevel\" );             airfareReimbursement = 0;         }     } }
SDL_25:47:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): if (stafflevel.equals( \"manager\" )) {     if (monthlysalesamount >= 50000) {         airfareReimbursement = airfareamount;     } else {         airfareReimbursement = 0;     } } else {     if (stafflevel.equals( \"supervisor\" )) {         if (monthlysalesamount >= 80000) {             airfareReimbursement = airfareamount;         } else {             airfareReimbursement = 0;         }     } else {         new java.io.IOException( \"Invalid stafflevel\" );         airfareReimbursement = 0;     } }  =>  
SDL_26:48:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): if (monthlysalesamount >= 50000) {     airfareReimbursement = airfareamount; } else {     airfareReimbursement = 0; }  =>  
SDL_27:65:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): if (stafflevel.equals( \"manager\" )) {     if (monthlysalesamount >= 50000) {         airfareReimbursement = airfareamount;     } else {         airfareReimbursement = 0;     } } else {     if (stafflevel.equals( \"supervisor\" )) {         if (monthlysalesamount >= 80000) {             airfareReimbursement = airfareamount;         } else {             airfareReimbursement = 0;         }     } else {         new java.io.IOException( \"Invalid stafflevel\" );         airfareReimbursement = 0;     } }  =>   if (true) {     if (monthlysalesamount >= 50000) {         airfareReimbursement = airfareamount;     } else {         airfareReimbursement = 0;     } } else {     if (stafflevel.equals( \"supervisor\" )) {         if (monthlysalesamount >= 80000) {             airfareReimbursement = airfareamount;         } else {             airfareReimbursement = 0;         }     } else {         new java.io.IOException( \"Invalid stafflevel\" );         airfareReimbursement = 0;     } }
SDL_28:54:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): if (stafflevel.equals( \"supervisor\" )) {     if (monthlysalesamount >= 80000) {         airfareReimbursement = airfareamount;     } else {         airfareReimbursement = 0;     } } else {     new java.io.IOException( \"Invalid stafflevel\" );     airfareReimbursement = 0; }  =>  
SDL_29:49:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): airfareReimbursement = airfareamount;  =>  
SDL_30:53:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): if (monthlysalesamount >= 50000) {     airfareReimbursement = airfareamount; } else {     airfareReimbursement = 0; }  =>   if (true) {     airfareReimbursement = airfareamount; } else {     airfareReimbursement = 0; }
SDL_31:51:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): airfareReimbursement = 0;  =>  
SDL_32:55:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): if (monthlysalesamount >= 80000) {     airfareReimbursement = airfareamount; } else {     airfareReimbursement = 0; }  =>  
SDL_33:64:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): if (stafflevel.equals( \"supervisor\" )) {     if (monthlysalesamount >= 80000) {         airfareReimbursement = airfareamount;     } else {         airfareReimbursement = 0;     } } else {     new java.io.IOException( \"Invalid stafflevel\" );     airfareReimbursement = 0; }  =>   if (true) {     if (monthlysalesamount >= 80000) {         airfareReimbursement = airfareamount;     } else {         airfareReimbursement = 0;     } } else {     new java.io.IOException( \"Invalid stafflevel\" );     airfareReimbursement = 0; }
SDL_34:62:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): new java.io.IOException( \"Invalid stafflevel\" ); airfareReimbursement = 0;  =>   airfareReimbursement = 0;
SDL_35:62:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): new java.io.IOException( \"Invalid stafflevel\" ); airfareReimbursement = 0;  =>   new java.io.IOException( \"Invalid stafflevel\" );
SDL_36:56:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): airfareReimbursement = airfareamount;  =>  
SDL_37:60:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): if (monthlysalesamount >= 80000) {     airfareReimbursement = airfareamount; } else {     airfareReimbursement = 0; }  =>   if (true) {     airfareReimbursement = airfareamount; } else {     airfareReimbursement = 0; }
SDL_38:58:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): airfareReimbursement = 0;  =>  
SDL_39:67:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): reimbursementsOtherThanAirfare = otherexpensesamount;  =>  
SDL_40:71:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): if (monthlysalesamount >= 100000) {     reimbursementsOtherThanAirfare = otherexpensesamount; } else {     reimbursementsOtherThanAirfare = 0; }  =>   if (true) {     reimbursementsOtherThanAirfare = otherexpensesamount; } else {     reimbursementsOtherThanAirfare = 0; }
SDL_41:69:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): reimbursementsOtherThanAirfare = 0;  =>  
SDL_42:73:double_calculateReimbursementAmount(java.lang.String,double,double,double,double): return totalReimbursementAmount;  =>   return 0;
VDL_1:24:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):actualmonthlymileage < allowableMileage => allowableMileage
VDL_2:24:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):actualmonthlymileage < allowableMileage => actualmonthlymileage
VDL_3:31:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):actualmonthlymileage < allowableMileage => allowableMileage
VDL_4:31:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):actualmonthlymileage < allowableMileage => actualmonthlymileage
VDL_5:43:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):actualmonthlymileage - allowableMileage => allowableMileage
VDL_6:43:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):actualmonthlymileage - allowableMileage => actualmonthlymileage
VDL_7:43:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):costPerKilometer * (actualmonthlymileage - allowableMileage) => actualmonthlymileage - allowableMileage
VDL_8:48:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):monthlysalesamount >= 50000 => 50000
VDL_9:55:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):monthlysalesamount >= 80000 => 80000
VDL_10:66:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):monthlysalesamount >= 100000 => 100000
VDL_11:71:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):-feeForOverUseOfCar =>  
VDL_12:71:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):-feeForOverUseOfCar + airfareReimbursement => -feeForOverUseOfCar
VDL_13:71:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):-feeForOverUseOfCar + airfareReimbursement + reimbursementsOtherThanAirfare => -feeForOverUseOfCar + airfareReimbursement
ODL_1:24:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):actualmonthlymileage < allowableMileage => actualmonthlymileage
ODL_2:24:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):actualmonthlymileage < allowableMileage => allowableMileage
ODL_3:31:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):actualmonthlymileage < allowableMileage => actualmonthlymileage
ODL_4:31:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):actualmonthlymileage < allowableMileage => allowableMileage
ODL_5:43:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):actualmonthlymileage - allowableMileage => actualmonthlymileage
ODL_6:43:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):actualmonthlymileage - allowableMileage => allowableMileage
ODL_7:43:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):costPerKilometer * (actualmonthlymileage - allowableMileage) => costPerKilometer
ODL_8:43:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):costPerKilometer * (actualmonthlymileage - allowableMileage) => actualmonthlymileage - allowableMileage
ODL_9:48:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):monthlysalesamount >= 50000 => monthlysalesamount
ODL_10:48:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):monthlysalesamount >= 50000 => 50000
ODL_11:55:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):monthlysalesamount >= 80000 => monthlysalesamount
ODL_12:55:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):monthlysalesamount >= 80000 => 80000
ODL_13:66:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):monthlysalesamount >= 100000 => monthlysalesamount
ODL_14:66:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):monthlysalesamount >= 100000 => 100000
ODL_15:71:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):-feeForOverUseOfCar => feeForOverUseOfCar
ODL_16:71:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):-feeForOverUseOfCar + airfareReimbursement => -feeForOverUseOfCar
ODL_17:71:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):-feeForOverUseOfCar + airfareReimbursement => airfareReimbursement
ODL_18:71:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):-feeForOverUseOfCar + airfareReimbursement + reimbursementsOtherThanAirfare => -feeForOverUseOfCar + airfareReimbursement
ODL_19:71:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):-feeForOverUseOfCar + airfareReimbursement + reimbursementsOtherThanAirfare => reimbursementsOtherThanAirfare
CDL_1:48:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):monthlysalesamount >= 50000 => monthlysalesamount
CDL_2:55:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):monthlysalesamount >= 80000 => monthlysalesamount
CDL_3:66:double_calculateReimbursementAmount(java.lang.String,double,double,double,double):monthlysalesamount >= 100000 => monthlysalesamount
